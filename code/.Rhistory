##get smallest p-value and corresponding metabolite
min(medTest.FDR)
metabs[which.min(medTest.FDR)]
?table
?prcomp
segment1 <- 10:200
segment2 <- 205:3000
segment1
segment2
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
plot(all_bases)
y <- rep(0,4500)
y[all_bases] <- 1
x <- 1:4500
plot(y ~ x)
y <- rep(0,5000)
y[all_bases] <- 1
x <- 1:5000
plot(y ~ x)
sample(1:10, 3)
sample(1:10, 3)
set.seed(482058)
permute1 <- sample(1:5000, length(all_bases))
y_permute <- rep(0,5000)
y_permute[permute1] <- 1
plot(y ~x )
head(y)
head(y_permute)
plot(y_permute ~ x)
plot(y_permute ~ x, pch=3)
plot(y_permute ~ x, pch=20)
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 10000
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
par(mfrow=c(1,2))
plot(y ~ x)
plot(y_permute ~ x, pch=20)
plot(y ~ x, pch=".")
plot(y_permute ~ x, pch=".")
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 100000
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
par(mfrow=c(1,2))
plot(y ~ x, pch=".")
plot(y_permute ~ x, pch=".")
sum(y)
sum(y_permute)
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 1000000
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
par(mfrow=c(1,2))
plot(y ~ x, pch=".")
plot(y_permute ~ x, pch=".")
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 10000
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
par(mfrow=c(1,2))
plot(y ~ x, pch=".")
plot(y_permute ~ x, pch=".")
hist(y)
hist(y_permute)
table(y)
table(y_permute)
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 249*10^6
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
ength(y)
length(y)
length(y_permute)
sqrt(2)
x <- (1:200)/200
x
quantile(x)
x <- (101:300)/300
quantile(x)
quantile(x, (0:8)/8)
file_url <- getURL("https://raw.githubusercontent.com/SiminaB/DMD-metabolomics/master/S1_Table.csv")
library(RCurl)
install.packages("RCurl")
file_url <- getURL("https://raw.githubusercontent.com/SiminaB/DMD-metabolomics/master/S1_Table.csv")
library(RCurl)
file_url <- getURL("https://raw.githubusercontent.com/SiminaB/DMD-metabolomics/master/S1_Table.csv")
MasterFrame <- read.csv(file_url)
?read.csv
file_url <- getURL("https://raw.githubusercontent.com/SiminaB/DMD-metabolomics/master/S1_Table.csv")
MasterFrame <- read.csv(file_url)
MasterFrame <- read.csv(text=file_url)
install.packages("kable")
library(ggplot2)
library(corrplot)
install.packages(corrplot)
install.packages("corrplot")
library(RColorBrewer)
?sample
j = 1
sampleof9 = 4
counter=2
paste("j=", j, ";" "sampleof9=", sampleof9, ";"   , "counter=", counter")
paste("j=", j, ";", "sampleof9=", sampleof9, ";"   , "counter=", counter")
""
paste("j=", j, ";", "sampleof9=", sampleof9, ";"   , "counter=", counter)
paste("j=", j, ";", "sampleof9=", sampleof9, ";"   , "counter=", counter, sep="")
paste("j=", j, "; ", "sampleof9=", sampleof9, "; "   , "counter=", counter, sep="")
print(paste("j=", j, "; ", "sampleof9=", sampleof9, "; "   , "counter=", counter, sep=""))
for(j in 1:5)
{
sampleof9 <- sample(1:9,1)
counter <- j^2
print(paste("j = ", j, "; ", "sampleof9 = ", sampleof9,
"; ", "counter = ", counter, sep=""))
}
x <- rep(NA, 5)
for(j in 1:5)
{
sampleof9 <- sample(1:9,1)
counter <- j^2
x[j] <- paste("j = ", j, "; ", "sampleof9 = ", sampleof9,
"; ", "counter = ", counter, sep="")
}
x
x <- rep(NA, 5)
for(j in 1:5)
{
sampleof9 <- sample(1:9,1)
counter <- j^2
x[j] <- paste("j = ", j, "; ", "sampleof9 = ", sampleof9,
"; ", "counter = ", counter, sep="")
}
x
paste(1:9, 11:19)
class(x)
class(x[j])
mode(x)
length(x)
class(paste("j = ", j, "; ", "sampleof9 = ", sampleof9,
"; ", "counter = ", counter, sep=""))
y <- "M"
y <- c(y, "F")
x
x <- rep(NA, 5)
x
class(x)
x <- character(5)
x
plot(cars)
install.packages(c("RCurl","RColorBrewer","corrplot"))
library("RCurl")
library("RColorBrewer")
library("corrplot")
y <- rnorm(100)
x <- rnorm(100)
summary(lm(y ~ x))
coef(summary(lm(y ~ x)))
coef(summary(glm(y ~ x)))
confint(lm(y ~ x))
confint(glm(y ~ x))
coef(summary(glm(y ~ x, family=poisson)))
coef(summary(glm(I(abs(y)) ~ x, family=poisson)))
coef(summary(glm(y ~ x, family=gaussian)))
library(igraph)
install.packages("igraph")
library(igraph)
?graph.data.frame
library(utils)
library(shiny)
library(shinyBS)
library(ggvis)
library(networkD3)
library(igraph)
library(kableExtra)
library(knitr)
library(dplyr)
library(rDGIdb)
library(networkViz)
load("~/GitHub/nfpm/General_interface/code/example_network_cat3.RData")
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt", version = "3.8")
source("http://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl)
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl)
sessionInfo()
seq(0,1,0.1)
citation()
load("C:/Users/Simina/Documents/GitHub/nfpm/General_interface/code/database_inputs_to_app.RData")
head(Onc_df)
##rename KEGG_cancer_paths_onc_long to Onc_df
Onc_df <- KEGG_cancer_paths_onc_long
head(Onc_df)
head(drugs_PO_FDA_biomarkers)
library(devtools)
install_github('AI1013/popadmix-pkg', subdir="R_pkg/")
101+208+47+11+10
18+45+19+5+
3
17.82+21.63+40.43+45.45+30
18/101
45/208
90/377
e <- rep(c(1:3), each=10)
e
x <- e+rnorm(30)
cor.test(e,x)
summary(lm(x ~ e))
35/65*1.5
35/65
35/65*1.5
35/65*1.5*2.8
2.26/(1+2.26)
var(1,2)
var(c(1,2))
var(c(1,3))
var(c(1,4))
15126+14752
?grey.colors
?colorRamp
reds <- colorRamp(brewer.pal(8, "YlOrRd"))
library(RColorBrewer)
reds <- colorRamp(brewer.pal(8, "YlOrRd"))
length(reds)
reds
reds.func <- colorRamp(brewer.pal(8, "YlOrRd"))
reds <- reds.func(60)
reds
reds.func <- colorRampPalette(brewer.pal(8, "YlOrRd"))
reds <- reds.func(60)
reds
library(devtools)
install_github('AI1013/popadmix-pkg/R_pkg', build_vignettes = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
library(devtools)
install_github('AI1013/popadmix-pkg/R_pkg', build_vignettes = TRUE)
library(popadmix)
browseVignettes("popadmix")
browseVignettes("popadmix")
library(devtools)
install_github('AI1013/popadmix-pkg/R_pkg', build_vignettes = TRUE)
library(popadmix)
browseVignettes("popadmix")
library(devtools)
install_github('seandavi/ClinicalTrialsAPI')
library(ClinicalTrialsAPI)
res = ct_search(diseases.display_name = "Breast Cancer")
install.packages("curl")
res = ct_search(diseases.display_name = "Breast Cancer")
class(res)
length(res)
names(res)
length(res$count)
length(res$trials)
names(res$trials)
res$trials
res = ct_search(diseases.display_name = "Duchenne Muscular Dystrophy")
res$trials
res
res = ct_search(diseases.display_name = "Duchenne")
res$trials
res = ct_search(diseases.display_name = "DMD")
res$trials
res = ct_search(diseases.display_name = "Diabetes")
res$trials
res = ct_search(diseases.display_name = "Prostate Cancer")
res$trials
?ct_search
res = ct_search(diseases.display_name = "Prostate Cancer", size=50)
length(res$trials)
res2 = ct_search(diseases.display_name = "Prostate Cancer", size=50, from=51)
length(res$trials)
length(res2$trials)
res$trials[[1]]
head(res$trials[[1]])
res$trials[[1]]$nci_id
res2$trials[[1]]$nci_id
res2 = ct_search(diseases.display_name = "Prostate Cancer", size=50, from=50)
res2$trials[[1]]$nci_id
library(rclinicaltrials)
z <- clinicaltrials_search(query = 'lime+disease')
z <- clinicaltrials_search(diseases.display_name = 'Diabetes')
clinicaltrials_count(query = "myeloma")
z <- clinicaltrials_search(query = 'myeloma')
?clinicaltrials_search
clinicaltrials_search(query = 'cond=myeloma')
clinicaltrials_search(query = 'cond=melanoma')
## Not run: clinicaltrials_search(query = 'heart disease AND stroke AND California')
clinicaltrials_search(query = 'heart disease AND stroke AND California')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("swfdr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("swfdr")
install.packages(c("dplyr", "ggplot2", "gridExtra", "kableExtra", "knitr", "pander", "plotly", "RColorBrewer", "reshape2"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
library(swfdr)
BiocManager::install(version='devel')
BiocManager::install("swfdr")
library(swfdr)
help(package="swfdr")
browseVignettes("swfdr")
BiocManager::install("DelayedArray")
library(DelayedArray)
library(BiocParallel)
BiocManager::install("BiocParallel")
library(DelayedArray)
library(BiocParallel)
BiocManager::install("BiocParallel")
library(BiocParallel)
BiocManager::install("BiocParallel")
tenx
install_github("jkanche/nfpmShinyComponent")
library(devtools)
install.packages("devtools")
library(networkViz)
install_github("jkanche/nfpmShinyComponent")
library(devtools)
install_github("jkanche/nfpmShinyComponent")
library(networkViz)
2^NA
2^-Inf
?dist
??spread
set.seed(123)
library(ade4)
n_copies <- 5
n <- 20
p <- 5
sigma <- 5
M <- matrix(rnorm(n*p, sd = sigma), nrow = n)
E.lst <- lapply(seq_len(n_copies), function(x) matrix(rnorm(n*p), nrow = n))
M.lst <- lapply(E.lst, function(E) {data.frame(M + E)})
install.packages(ade4)
install.packages("ade4")
install.packages("DistatisR")
library(dplyr)
library(tidyr)
library(reshape2)
library(DistatisR)
D.lst <- lapply(M.lst, function(x) as.matrix(dist(x)))
D.arr <- abind::abind(D.lst, along = 3)
distatis.res <- DistatisR::distatis(D.arr, nfact2keep = n)
df <- distatis.res$res4Splus$PartialF %>%
reshape2::melt(varnames = c("SampleID", "FactorID", "TableID")) %>%
spread(key = "FactorID", value = "value") %>%
mutate(SampleID = factor(SampleID))
head(df)
distatis.res$res4Splus$PartialF[1,1,1]
distatis.res$res4Splus$PartialF[1:2,1:2,1]
?system.file
?list.files
install.packages("jpeg")
library(phenoptr)
path <- sample_cell_seg_path()
csd <- read_cell_seg_data(path)
dim(csd)
csd
table(csd$`Sample Name`)
grep('Nucleus.*Mean', names(csd), value=TRUE)
nrow(csd)
table(csd$`Tissue Category`, csd$Phenotype)
library(dplyr)
library(ggplot2)
ggplot(csd, aes(Phenotype, `Entire Cell PDL1 (Opal 520) Mean`, color=Phenotype)) +
geom_boxplot() +
scale_color_brewer(palette='Set1') +
labs(y='PDL1 Expression', title='PDL1 Expression per Phenotype')
ggplot(csd %>% filter(Phenotype!='other'),
aes(`Entire Cell PDL1 (Opal 520) Mean`,
`Entire Cell PD1 (Opal 650) Mean`,
color=Phenotype)) +
geom_point(size=1, alpha=0.2) +
facet_wrap(~Phenotype) +
scale_x_log10() + scale_y_log10() + scale_color_brewer(palette='Set1') +
labs(x='PDL1 Expression', y='PD1 Expression',
title='Comparison of PD1 and PDL1 Expression per Phenotype')
csd <- csd %>% filter(Phenotype!='other')
dim(csd)
distances <- find_nearest_distance(csd)
glimpse(distances)
dim(distances)
hist(distances$`Distance to CD68+`,col="grey")
sum(distances$`Distance to CD68+` == 0)
dim(csd)
csd_with_distance <- bind_cols(csd, distances)
dim(csd_with_distance)
csd_with_distance %>% group_by(Phenotype) %>%
select(Phenotype, starts_with('Distance to')) %>%
summarize_all(~round(mean(.), 1))
csd_with_distance %>% group_by(Phenotype) %>%
select(Phenotype, starts_with('Distance to')) %>%
summarize_all(~round(median(.), 1))
mean(csd_with_distance$`Distance to CD68+`[csd_with_distance$Phenotype == "CD68+"])
round(mean(csd_with_distance$`Distance to CD68+`[csd_with_distance$Phenotype == "CD68+"]),1)
ggplot(csd_with_distance, aes(`Distance to CD8+`, color=Phenotype)) +
geom_density(size=1)
cd8_cells = csd_with_distance %>% filter(select_rows(csd_with_distance, 'CD8+'))
ck_cells = csd_with_distance %>% filter(select_rows(csd_with_distance, 'CK+'))
# For each CD8+ cell, join with the data for the nearest CK+ cell
cd8_to_ck = cd8_cells %>% left_join(ck_cells, by=c('Cell ID CK+'='Cell ID'),
suffix=c('', '.CK'))
dim(cd8_cells)
dim(ck_cells)
dim(cd8_to_ck)
length(intersect(colnames(cd8_cells), colnames(ck_cells)))
head(colnames(cd8_cells),20)
head(colnames(ck_cells),20)
head(colnames(cd8_to_ck),20)
tail(colnames(cd8_to_ck),20)
background_path =
system.file("extdata/sample/Set4_1-6plex_[16142,55840]_composite_image.jpg", package='phenoptr')
background = jpeg::readJPEG(background_path) %>% as.raster()
class(background)
##this code is just for displaying the background image
library(EBImage)
img = readImage(background_path)
display(img, method="browser")
##go back to the phenoptr code now...
xlim = c(0, 934)
ylim = c(0, 700)
base_plot = ggplot(mapping=aes(`Cell X Position`, `Cell Y Position`)) %>%
phenoptr:::add_scales_and_background(background, xlim, ylim, scale_color='white') +
labs(x='Cell X Position', y='Cell Y Position') +
scale_color_manual('Phenotype', values=c('CD8+'='yellow', 'CK+'='orange'))
base_plot + geom_segment(data=cd8_to_ck,
aes(xend=`Cell X Position.CK`, yend=`Cell Y Position.CK`),
color='white') +
geom_point(data=ck_cells, aes(color='CK+'), size=1) +
geom_point(data=cd8_cells, aes(color='CD8+'), size=1) +
labs(title='Nearest CK+ to each CD8+')
BiocManager::install("pandaR")
load("C:/Users/Simina/Documents/GitHub/nfpm/General_interface/code/database_inputs_to_app.RData")
ls()
head(KEGG_cancer_paths_onc_long)
KEGG_oncogenes <- KEGG_cancer_paths_onc_long
ls()
save(list=c("DrugBank_targets", "drugs_PO_FDA_biomarkers", "drugs_PO_FDA_targets", "FDA_approved_drugs", "KEGG_cancer_paths_onc_long", "KEGG_oncogenes", "list_paths_KEGG"), file="C:/Users/Simina/Documents/GitHub/nfpm/General_interface/code/example_CDGnet_database_inputs.RData")
save(list=c("DrugBank_targets", "drugs_PO_FDA_biomarkers", "drugs_PO_FDA_targets", "FDA_approved_drugs", "KEGG_oncogenes", "list_paths_KEGG"), file="C:/Users/Simina/Documents/GitHub/nfpm/General_interface/code/example_CDGnet_database_inputs.RData")
getwd()
setwd("~/GitHub/CDGnet/code")
rm(list=ls())
load("C:/Users/Simina/Documents/GitHub/nfpm/General_interface/code/example_CDGnet_database_inputs.RData")
ls()
save(list=c("drugs_PO_FDA_biomarkers", "drugs_PO_FDA_targets", "FDA_approved_drugs"), file="C:/Users/Simina/Documents/GitHub/CDGnet/data/example_CDGnet_database_inputs.RData")
rm(list=ls())
load("C:/Users/Simina/Documents/GitHub/CDGnet/data/example_CDGnet_database_inputs.RData")
ls()
head(drugs_PO_FDA_biomarkers)
head(drugs_PO_FDA_targets)
ls()
head(FDA_approved_drugs)
